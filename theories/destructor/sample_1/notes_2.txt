*** Question
In C++, does a class have a default destructor?

*** Answer
Yes, in C++, if you don't explicitly define a destructor for a class, the compiler will 
provide a default destructor implicitly. This default destructor performs no special actions 
and is often called a "trivial destructor."

The default destructor provided by the compiler will not release any resources or 
perform any cleanup specific to the class. It is generated automatically if no user-defined 
destructor is provided, and its behavior is similar to that of an empty user-defined destructor.

Here's an example demonstrating the concept:

    #include <iostream>

    class MyClass {
    public:
        // Default constructor
        MyClass() {
            std::cout << "Constructor called" << std::endl;
        }

        // No user-defined destructor
        // The compiler will provide a default destructor

        // Other member functions...
    };

    int main() {
        std::cout << "Creating object..." << std::endl;
        MyClass obj; // Constructor called

        std::cout << "Object is about to be destroyed..." << std::endl;
        // Compiler-provided default destructor called when obj goes out of scope at the end of main()

        return 0;

        // -> Output:
        // Creating object...
        // Constructor called
        // Object is about to be destroyed...
    }

In this example, the class MyClass does not have a user-defined destructor. Therefore, 
the compiler automatically provides a default destructor for the class. When the object obj 
goes out of scope at the end of main(), the compiler-generated default destructor is called 
implicitly to perform any necessary cleanup.